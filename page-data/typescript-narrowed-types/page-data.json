{"componentChunkName":"component---src-templates-log-post-jsx","path":"/typescript-narrowed-types/","result":{"data":{"markdownRemark":{"html":"<p>Some functions are able to use type guards to perform type narrowing across arrays or objects. If you do some lookups in an array, for instance, you may wind up with an array of nullable types:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> jackson5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Jackie'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tito'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Jermaine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Marlon'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Janet'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  jackson5<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> who<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type is (string | undefined)[]</span></code></pre></div>\n<p>If you filter out the undefined values using filter , TypeScript isn’t able to follow along:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Janet'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> jackson5<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> who<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> who <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type is (string | undefined)[]</span></code></pre></div>\n<p>But if you use a type guard, it can:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">isDefined</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> x <span class=\"token keyword\">is</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> members <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Janet'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Michael'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">who</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> jackson5<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> n <span class=\"token operator\">===</span> who<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isDefined<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Type is string[]</span></code></pre></div>\n<p>If you filter out the undefined values using filter , TypeScript isn’t able intuition for how narrowing works. Understanding how types in TypeScript narrow will help you build an intuition for how type inference works, make sense of errors, and generally have a more productive relationship with the type checker.</p>","frontmatter":{"title":"Typescript narrowed types","date":"aug 19, 2020","tags":["typescript","types"]}}},"pageContext":{"slug":"/typescript-narrowed-types/"}},"staticQueryHashes":[]}