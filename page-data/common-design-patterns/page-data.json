{"componentChunkName":"component---src-templates-log-post-jsx","path":"/common-design-patterns/","result":{"data":{"markdownRemark":{"html":"<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Absctract Factory</td>\n<td>Supports creation of sets of related objects by specifying the kind of set but not the kinds of each specific object</td>\n</tr>\n<tr>\n<td>Adapter</td>\n<td>Converts the interface of a class to a different interface</td>\n</tr>\n<tr>\n<td>Bridge</td>\n<td>Builds an interface and an implementation in such a way that either can vary without the other varying</td>\n</tr>\n<tr>\n<td>Composite</td>\n<td>Consists of an object that contains additional objects of its own type to that client code can interact with the top-level object and not concern itsef with all the detailed objects</td>\n</tr>\n<tr>\n<td>Decorator</td>\n<td>Attaches responsibilities to an object dynamically, without creating specific subclasses for each possible configuration of responsibilities</td>\n</tr>\n<tr>\n<td>Facade</td>\n<td>Provides a consistent interface to code that wouldn't otherwise offer a consistent interface</td>\n</tr>\n<tr>\n<td>Factory Method</td>\n<td>Instantiates classes derived from a specific base class without needing to keep track of the individual derived classes anywhere but the Factory Method</td>\n</tr>\n<tr>\n<td>Iterator</td>\n<td>A server object that provides access to each element in a set sequentially</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>Keeps multiple object in synch with one another by making an object responsible for notifying the set of related objects about changes to any member of the set</td>\n</tr>\n<tr>\n<td>Singleton</td>\n<td>Provides global access to a class that has one and only on instance</td>\n</tr>\n<tr>\n<td>Strategy</td>\n<td>Defines a set of algorithms of behaviors that are dynamically interchangeable with each other</td>\n</tr>\n<tr>\n<td>Template Method</td>\n<td>Defines the structure of an algorithm but leaves some of the detailed implementation to sublclasses</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"Common software design patterns","date":"2021-01-18","tags":["design","software","architecture","code complete"]}}},"pageContext":{"slug":"/common-design-patterns/"}},"staticQueryHashes":[]}